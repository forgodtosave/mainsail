@top Program { (Import | ConfigBlock)+ AutoGenSection? }

@skip { space | blankLine | Comment newline? | AutoGenLineStart space* newline? } 

valueBlock<content> { indent (content (newline | eof) | valueBlock<content>)+ (dedent | eof) }
sep<content, seperator> { content (seperator content)+ }


Import { "[" ImportKeyword FilePath "]" (newline | eof) }
ConfigBlock {"[" BlockType Identifier* "]" ( newline Body? | newline? eof ) }

Body { Option+ eof? }
Option { Parameter ":" Value | GcodeKeyword Jinja2 }

Value { value (newline | eof) | value? newline valueBlock<value> }
Jinja2 { jinja2 (newline | eof) | jinja2? newline valueBlock<jinja2> }

value { Pin | pins | VirtualPin | Cords | Number | String | Boolean | Path | FilePath | Resolution | Ratio | Ipv4 | Ipv6 }
pins { sep<(Pin | VirtualPin), ","> }
Cords { sep<number, ","> }
Number { number }

AutoGenHeader { autoGenFirstLine newline autoGenSecondLine newline }
AutoGenSection { AutoGenHeader AutoGenBlock+ }
AutoGenBlock { "[" BlockType Identifier* "]" newline AutoGenBody }
AutoGenBody { AutoGenOption+ eof? }
AutoGenOption { Parameter "=" AutoGenValue } 
AutoGenValue { (value | value? (newline AutoGenIndent value)+) (newline | eof) }


@context trackIndent from "./tokens.js"
@external tokens indentation from "./tokens.js" { indent, dedent }
@external tokens newlines from "./tokens.js" { newline, blankLine, eof }

@tokens {
  extAscii { $[a-zA-Z0-9_\-.] }
  unixPath { ![/<>|:&{}\t\f #;\[\]\n\r] }

  ImportKeyword{ "include" }
  GcodeKeyword{ extAscii* "gcode:" }
  BlockType { extAscii+ }
  Identifier { extAscii+ }
  Parameter { extAscii+ }
  Path { ("/"|"~/") unixPath+ ("/" unixPath+)* }
  FilePath { (Path | unixPath+) "." unixPath+ }
  Resolution { $[0-9]+ "x" $[0-9]+ }
  Ratio { $[0-9]+ ":" $[0-9]+ }
  Ipv4 { $[0-9]+ "." $[0-9]+ "." $[0-9]+ "." $[0-9]+ ((":"|"/") $[0-9]+)? }
  hex { $[0-9a-fA-F] }
  Ipv6 { (("::" (hex+ ":")* hex+) 
        | (hex+ (":" hex+)* "::")
        | ((hex+ ":")+ (":" hex+)+)
        | ((hex+ ":" hex+ ":" hex+ ":" hex+ ":" hex+ ":" hex+))) 
        ("/" $[0-9]+)?}

  String { ![#;\n\r]+ }
  jinja2 { ![#;\n\r]+ }
  number { "-"? $[0-9]+ ("." $[0-9]*)? }
  Boolean { "True" | "False" | "true" | "false" } 
  Pin { ("^" | "~")? "!"? "P" $[A-Z]? $[0-9.]+ } 
  VirtualPin { ("^" | "~")? "!"? extAscii+ ":" extAscii+ }

  AutoGenLineStart { "#*#" }
  AutoGenIndent { "#*# \t" }
  autoGenFirstLine { "#*# <" "-"+ " SAVE_CONFIG " "-"+ ">" }
  autoGenSecondLine { $[A-Za-z\-. ]+ }

  Comment { ("#"|";") ![\n\r]* }

  space { $[ \t\f]+ }

  @precedence { space, jinja2, String } // because space is used in jinja2/string rules 
  @precedence { autoGenFirstLine, autoGenSecondLine, AutoGenIndent, space }
  @precedence { autoGenFirstLine, AutoGenIndent, AutoGenLineStart, Comment } // AutoGenerated also starts with a #
  @precedence { Resolution, Ipv4, Ipv6, Ratio, number, Pin, VirtualPin, Boolean, ImportKeyword, FilePath, Path, String }
  @precedence { ImportKeyword, BlockType }// because the ImportKeyword can be canerated with extAscii
  @precedence { GcodeKeyword, Parameter } // because the GcodeKeyword can be canerated with extAscii
}

@external propSource klipperConfigHighlighting from "./highlight"

@detectDelim

// to generate the parser run:
// npx lezer-generator klipperCfg.grammar -o klipperCfgParser.js